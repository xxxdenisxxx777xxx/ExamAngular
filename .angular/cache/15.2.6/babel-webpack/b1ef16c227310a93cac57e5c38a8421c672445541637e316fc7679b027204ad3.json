{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared.service\";\nimport * as i3 from \"@angular/common\";\nfunction AsteroidComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"p\", 3);\n    i0.ɵɵlistener(\"click\", function AsteroidComponent_div_1_Template_p_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.getAsteroidName());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 4);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Name: \", ctx_r0.getAsteroidName(), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Max.Distance: \", ctx_r0.getMaxEstimatedDiameter(), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Min.Distance: \", ctx_r0.getMinEstimatedDiameter(), \"\");\n  }\n}\nexport class AsteroidComponent {\n  constructor(http, sharedService) {\n    this.http = http;\n    this.sharedService = sharedService;\n    this.currentIndex = 0;\n    this.urls = [];\n    this.asteroidData = [];\n    this.isFetchingImages = true;\n    this.urls = [];\n  }\n  ngOnInit() {\n    this.http.get(`https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=${this.sharedService.key}&count=100`).subscribe(data => {\n      console.log(data);\n      const response = data;\n      const asteroids = response.near_earth_objects['2015-09-07'];\n      this.asteroidData = asteroids;\n      this.fetchAsteroidImages().subscribe(urls => {\n        this.urls = urls;\n        this.isFetchingImages = false;\n      });\n    });\n  }\n  fetchAsteroidImages() {\n    const imageRequests = [];\n    for (const asteroid of this.asteroidData) {\n      console.log(asteroid.close_approach_data);\n      for (const closeApproachData of asteroid.close_approach_data) {\n        const formattedDate = closeApproachData.close_approach_date;\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${this.sharedService.key}&date=${formattedDate}`;\n        imageRequests.push(this.http.get(url).pipe(map(data => data.url)));\n      }\n    }\n    return forkJoin(imageRequests);\n  }\n  nextImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex < this.urls.length - 1) {\n        this.currentIndex++;\n      } else {\n        this.currentIndex = 0;\n      }\n    }\n  }\n  lastImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex > 0) {\n        this.currentIndex--;\n      } else {\n        this.currentIndex = this.urls.length - 1;\n      }\n    }\n  }\n  getAsteroidName() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].name;\n    }\n    return '';\n  }\n  getMaxEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_max;\n    }\n    return '';\n  }\n  getMinEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_min;\n    }\n    return '';\n  }\n}\nAsteroidComponent.ɵfac = function AsteroidComponent_Factory(t) {\n  return new (t || AsteroidComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SharedService));\n};\nAsteroidComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AsteroidComponent,\n  selectors: [[\"app-asteroid\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"clickbutton-wrapper\", 4, \"ngIf\"], [1, \"clickbutton-wrapper\"], [1, \"text\", 3, \"click\"], [1, \"text\"]],\n  template: function AsteroidComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AsteroidComponent_div_1_Template, 7, 3, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.asteroidData && ctx.asteroidData.length > 0);\n    }\n  },\n  dependencies: [i3.NgIf],\n  styles: [\".clickbutton-wrapper[_ngcontent-%COMP%] {\\n    width: 100%;\\n    text-align: center;\\n    margin-top: 29%;\\n  }\\n  \\n  .clickbutton[_ngcontent-%COMP%] {\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: none;\\n    color: #fff;\\n    font-weight: bold;\\n    height: 700px;\\n    width: 35px;\\n    display: inline-block;\\n  }\\n  .container[_ngcontent-%COMP%] {\\n    position: relative;\\n  }\\n  \\n  .text[_ngcontent-%COMP%] {\\n    margin-left: 35px;\\n    margin-right: 35px;\\n    color:#fff;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQXN0ZXJvaWQvYXN0ZXJvaWQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiRUFBRTtJQUNFLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLFdBQVc7SUFDWCxxQkFBcUI7RUFDdkI7RUFDQTtJQUNFLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsVUFBVTtFQUNaIiwic291cmNlc0NvbnRlbnQiOlsiICAuY2xpY2tidXR0b24td3JhcHBlciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi10b3A6IDI5JTtcbiAgfVxuICBcbiAgLmNsaWNrYnV0dG9uIHtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgaGVpZ2h0OiA3MDBweDtcbiAgICB3aWR0aDogMzVweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbiAgLmNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIFxuICAudGV4dCB7XG4gICAgbWFyZ2luLWxlZnQ6IDM1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAzNXB4O1xuICAgIGNvbG9yOiNmZmY7XG4gIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,QAAQ,QAAQ,MAAM;AAC/B,SAASC,GAAG,QAAQ,gBAAgB;;;;;;;;ICDhCC,8BAAiF;IAC7DA;MAAAA;MAAA;MAAA,OAASA,uCAAiB;IAAA,EAAC;IAACA,YAA6B;IAAAA,iBAAI;IAC7EA,4BAAgB;IAAAA,YAA4C;IAAAA,iBAAI;IAChEA,4BAAgB;IAAAA,YAA4C;IAAAA,iBAAI;;;;IAFpBA,eAA6B;IAA7BA,6DAA6B;IACzDA,eAA4C;IAA5CA,6EAA4C;IAC5CA,eAA4C;IAA5CA,6EAA4C;;;AD4BpE,OAAM,MAAOC,iBAAiB;EAM5BC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;IALpD,iBAAY,GAAW,CAAC;IACxB,SAAI,GAAa,EAAE;IACnB,iBAAY,GAAe,EAAE;IAC7B,qBAAgB,GAAY,IAAI;IAGrC,IAAI,CAACC,IAAI,GAAG,EAAE;EAChB;EAEAC,QAAQ;IACN,IAAI,CAACH,IAAI,CACNI,GAAG,CAAC,2FAA2F,IAAI,CAACH,aAAa,CAACI,GAAG,YAAY,CAAC,CAClIC,SAAS,CAAEC,IAAS,IAAI;MACvBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,MAAMG,QAAQ,GAAQH,IAAI;MAC1B,MAAMI,SAAS,GAAeD,QAAQ,CAACE,kBAAkB,CAAC,YAAY,CAAC;MACvE,IAAI,CAACC,YAAY,GAAGF,SAAS;MAC7B,IAAI,CAACG,mBAAmB,EAAE,CAACR,SAAS,CAAEJ,IAAc,IAAI;QACtD,IAAI,CAACA,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACa,gBAAgB,GAAG,KAAK;MAC/B,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;EAEQD,mBAAmB;IACzB,MAAME,aAAa,GAAG,EAAE;IAExB,KAAK,MAAMC,QAAQ,IAAI,IAAI,CAACJ,YAAY,EAAE;MACxCL,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAACC,mBAAmB,CAAC;MACzC,KAAK,MAAMC,iBAAiB,IAAIF,QAAQ,CAACC,mBAAmB,EAAE;QAC5D,MAAME,aAAa,GAAGD,iBAAiB,CAACE,mBAAmB;QAC3D,MAAMC,GAAG,GAAG,+CAA+C,IAAI,CAACrB,aAAa,CAACI,GAAG,SAASe,aAAa,EAAE;QACzGJ,aAAa,CAACO,IAAI,CAAC,IAAI,CAACvB,IAAI,CAACI,GAAG,CAACkB,GAAG,CAAC,CAACE,IAAI,CACxC5B,GAAG,CAAEW,IAAS,IAAKA,IAAI,CAACe,GAAG,CAAC,CAC7B,CAAC;;;IAGN,OAAO3B,QAAQ,CAACqB,aAAa,CAAC;EAChC;EAEOS,SAAS;IACd,IAAI,CAAC,IAAI,CAACV,gBAAgB,EAAE;MAC1B,IAAI,IAAI,CAACW,YAAY,GAAG,IAAI,CAACxB,IAAI,CAACyB,MAAM,GAAG,CAAC,EAAE;QAC5C,IAAI,CAACD,YAAY,EAAE;OACpB,MAAM;QACL,IAAI,CAACA,YAAY,GAAG,CAAC;;;EAG3B;EAEOE,SAAS;IACd,IAAI,CAAC,IAAI,CAACb,gBAAgB,EAAE;MAC1B,IAAI,IAAI,CAACW,YAAY,GAAG,CAAC,EAAE;QACzB,IAAI,CAACA,YAAY,EAAE;OACpB,MAAM;QACL,IAAI,CAACA,YAAY,GAAG,IAAI,CAACxB,IAAI,CAACyB,MAAM,GAAG,CAAC;;;EAG9C;EAEOE,eAAe;IACpB,IAAI,IAAI,CAAChB,YAAY,IAAI,IAAI,CAACA,YAAY,CAACc,MAAM,GAAG,CAAC,EAAE;MACrD,OAAO,IAAI,CAACd,YAAY,CAAC,IAAI,CAACa,YAAY,CAAC,CAACI,IAAI;;IAElD,OAAO,EAAE;EACX;EAEOC,uBAAuB;IAC5B,IAAI,IAAI,CAAClB,YAAY,IAAI,IAAI,CAACA,YAAY,CAACc,MAAM,GAAG,CAAC,EAAE;MACrD,OAAO,IAAI,CAACd,YAAY,CAAC,IAAI,CAACa,YAAY,CAAC,CAACM,kBAAkB,CAACC,UAAU,CAACC,sBAAsB;;IAElG,OAAO,EAAE;EACX;EACOC,uBAAuB;IAC5B,IAAI,IAAI,CAACtB,YAAY,IAAI,IAAI,CAACA,YAAY,CAACc,MAAM,GAAG,CAAC,EAAE;MACrD,OAAO,IAAI,CAACd,YAAY,CAAC,IAAI,CAACa,YAAY,CAAC,CAACM,kBAAkB,CAACC,UAAU,CAACG,sBAAsB;;IAElG,OAAO,EAAE;EACX;;AA/EWtC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAuC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCjC9B5C,8BAAuB;MAEnBA,kEAIM;MAEVA,iBAAM;;;MANgCA,eAA6C;MAA7CA,sEAA6C","names":["forkJoin","map","i0","AsteroidComponent","constructor","http","sharedService","urls","ngOnInit","get","key","subscribe","data","console","log","response","asteroids","near_earth_objects","asteroidData","fetchAsteroidImages","isFetchingImages","imageRequests","asteroid","close_approach_data","closeApproachData","formattedDate","close_approach_date","url","push","pipe","nextImage","currentIndex","length","lastImage","getAsteroidName","name","getMaxEstimatedDiameter","estimated_diameter","kilometers","estimated_diameter_max","getMinEstimatedDiameter","estimated_diameter_min","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/miroshnicheenko/Documents/GitHub/ExamAngular/src/app/Asteroid/asteroid.component.ts","/Users/miroshnicheenko/Documents/GitHub/ExamAngular/src/app/Asteroid/asteroid.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SharedService } from '../shared.service';\n// API KEY - 4O7kxB74PxdUdOoK17f0pcqLZn4kJAmUDJrWYgbt\n\ninterface Asteroid {\n  id: string;\n  name: string;\n  absolute_magnitude_h: number;\n  estimated_diameter: {\n    kilometers: {\n      estimated_diameter_min: number;\n      estimated_diameter_max: number;\n    };\n  };\n  close_approach_data: {\n    close_approach_date: string;\n    relative_velocity: {\n      kilometers_per_hour: number;\n    };\n    miss_distance: {\n      kilometers: number;\n    };\n  }[];\n}\n\n@Component({\n  selector: 'app-asteroid',\n  templateUrl: './asteroid.component.html',\n  styleUrls: ['./asteroid.component.css']\n})\nexport class AsteroidComponent {\n  public currentIndex: number = 0;\n  public urls: string[] = [];\n  public asteroidData: Asteroid[] = [];\n  public isFetchingImages: boolean = true;\n\n  constructor(private http: HttpClient, private sharedService: SharedService) {\n    this.urls = [];\n  }\n\n  ngOnInit() {\n    this.http\n      .get(`https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-09-07&end_date=2015-09-08&api_key=${this.sharedService.key}&count=100`)\n      .subscribe((data: any) => {\n        console.log(data)\n        const response: any = data;\n        const asteroids: Asteroid[] = response.near_earth_objects['2015-09-07'];\n        this.asteroidData = asteroids;\n        this.fetchAsteroidImages().subscribe((urls: string[]) => {\n          this.urls = urls;\n          this.isFetchingImages = false;\n        });\n      });\n  }\n\n  private fetchAsteroidImages() {\n    const imageRequests = [];\n\n    for (const asteroid of this.asteroidData) {\n      console.log(asteroid.close_approach_data)\n      for (const closeApproachData of asteroid.close_approach_data) {\n        const formattedDate = closeApproachData.close_approach_date;\n        const url = `https://api.nasa.gov/planetary/apod?api_key=${this.sharedService.key}&date=${formattedDate}`;\n        imageRequests.push(this.http.get(url).pipe(\n          map((data: any) => data.url)\n        ));\n      }\n    }\n    return forkJoin(imageRequests);\n  }\n\n  public nextImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex < this.urls.length - 1) {\n        this.currentIndex++;\n      } else {\n        this.currentIndex = 0;\n      }\n    }\n  }\n\n  public lastImage() {\n    if (!this.isFetchingImages) {\n      if (this.currentIndex > 0) {\n        this.currentIndex--;\n      } else {\n        this.currentIndex = this.urls.length - 1;\n      }\n    }\n  }\n\n  public getAsteroidName() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].name;\n    }\n    return '';\n  }\n\n  public getMaxEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_max;\n    }\n    return '';\n  }\n  public getMinEstimatedDiameter() {\n    if (this.asteroidData && this.asteroidData.length > 0) {\n      return this.asteroidData[this.currentIndex].estimated_diameter.kilometers.estimated_diameter_min;\n    }\n    return '';\n  }\n}\n","<div class=\"container\">\n\n    <div class=\"clickbutton-wrapper\" *ngIf=\"asteroidData && asteroidData.length > 0\">\n        <p class=\"text\" (click)=\"getAsteroidName()\">Name: {{ getAsteroidName() }}</p>\n        <p class=\"text\">Max.Distance: {{ getMaxEstimatedDiameter()}}</p>\n        <p class=\"text\">Min.Distance: {{ getMinEstimatedDiameter()}}</p>\n    </div>\n\n</div>\n\n   "]},"metadata":{},"sourceType":"module","externalDependencies":[]}