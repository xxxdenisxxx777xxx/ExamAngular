{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./shared.service\";\nexport class AuthGuard {\n  constructor(router, sharedService) {\n    this.router = router;\n    this.sharedService = sharedService;\n  }\n  canActivate(route, state) {\n    const isAuthenticated = true;\n    if (this.sharedService.acess) {\n      return true;\n    } else {\n      this.router.navigate(['/unauthorized']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.SharedService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc,EAAUC,aAA4B;IAApD,WAAM,GAAND,MAAM;IAAkB,kBAAa,GAAbC,aAAa;EAAkB;EAE3EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,eAAe,GAAG,IAAI;IAE5B,IAAI,IAAI,CAACJ,aAAa,CAACK,KAAK,EAAE;MAC5B,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;MACvC,OAAO,KAAK;;EAEhB;;AAfWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","router","sharedService","canActivate","route","state","isAuthenticated","acess","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/miroshnicheenko/Documents/GitHub/ExamAngular/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SharedService } from './shared.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private sharedService: SharedService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isAuthenticated = true;\n\n    if (this.sharedService.acess) {\n      return true;\n    } else {   \n      this.router.navigate(['/unauthorized']); \n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}